{"version":3,"sources":["App.js","index.js"],"names":["Button","styled","button","Styles","div","App","props","calculateGPA","bind","handleGradeChange","handleCreditChange","resetToBaseState","state","grade1","credit1","grade2","credit2","grade3","credit3","grade4","credit4","grade5","credit5","grade6","credit6","baseState","console","log","Swal","fire","title","text","icon","cancelButtonText","showCancelButton","showConfirmButton","this","setState","answer","toFixed","message","returnAnswerString","footer","gradeArray","newGrades","i","length","s","match","push","showErrorBox","creditArray","newCredits","integer","parseInt","Number","isInteger","grade","credit","toLowerCase","credits","sumArray","convertGradeToNum","reduce","a","b","grades","finalAnswer","Object","entries","map","key","value","includes","checkIfValidGrade","checkIfValidCredits","undefined","getCalculation","isNaN","showAnswerBox","e","target","className","Row","Col","Input","name","placeholder","onChange","renderFormRow","onClick","Jumbotron","pic","Container","explainCard","renderInputs","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa6c1da7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Input } from 'reactstrap'\nimport { Row, Col, Container , Jumbotron } from 'react-bootstrap';\nimport Swal from 'sweetalert2'\n// import './node_modules/@sweetalert2/theme-dark';\nimport '../node_modules/@sweetalert2/theme-dark';\nimport styled from 'styled-components';\n\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       GPA Calculator\n//     </div>\n//   );\n// }\n\n// export default App;\n\nconst Button = styled.button`\n    background: #222;\n    border: none;\n    padding: 15px 32px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 6px;\n    color: #bbb;\n    margin:20px\n    transition-duration: 0.4s;\n    -webkit-transition-duration: 0.4s; \n    transition-duration: 0.4s;\n    font-size: 16px;\n    border-radius: 12px;\n    &:hover {\n        color: white;\n    },\n    .btn:focus, .btn:active {\n        outline: none !important;\n        box-shadow: none !important;\n      }\n`;\n\nconst Styles = styled.div`\n    .form-control:focus {\n        border-color: grey;\n        box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.075) inset, 0px 0px 0px grey;\n    }\n    input[type=text] {\n        background-color: white;\n        color: black;\n        font-size: 25x;\n        \n        border: 1px solid grey;\n        border-radius: 4px;\n        \n    }\n`;\n\n\n\n\n\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.calculateGPA = this.calculateGPA.bind(this)\n        this.handleGradeChange = this.handleGradeChange.bind(this)\n        this.handleCreditChange = this.handleCreditChange.bind(this)\n        this.resetToBaseState = this.resetToBaseState.bind(this);\n\n\n        this.state = {\n            grade1: '', credit1: '',\n            grade2: '', credit2: '',\n            grade3: '', credit3: '',\n            grade4: '', credit4: '',\n            grade5: '', credit5: '',\n            grade6: '', credit6: '',\n        }\n\n        this.baseState = this.state;\n    }\n\n\n\n    showErrorBox() {\n        console.log(\"Landed on error\")\n        return (\n            Swal.fire({\n                title: 'Error!',\n                text: \"One or more of the inputs is formatted incorrectly, make sure the grade is letter A through F and credits is a number\",\n                icon: 'error',\n                cancelButtonText: 'Retry',\n                showCancelButton: true,\n                showConfirmButton: false,\n            })\n        );\n    }\n\n    resetToBaseState() {\n        this.setState(this.baseState);\n    }\n\n    returnAnswerString(answer) {\n        answer = answer.toFixed(2)\n        if (answer >= 3.0) {\n            return [(\"Impressive! \\nYour GPA is\"), (\"Congrats you're doing great!\"), ('success')]\n        }\n        else if (answer > 2.5 && answer < 3.0) {\n            return [(\"Not bad! \\nYour GPA is\"), (\"Keep studying and bump it up!\"), ('warning')]\n        }\n        else if (answer <= 2.5) {\n            return [(\"Keep working hard!\\n Your GPA is\"), (\"Your GPA is quite low but keep trying!\"), ('error')]\n        }\n    }\n\n    showAnswerBox(answer) {\n        let message = this.returnAnswerString(answer);\n        return (\n            Swal.fire({\n                title: message[0],\n                footer: message[1],\n                text: answer.toFixed(2),\n                icon: message[2],\n                cancelButtonText: 'Back',\n                showCancelButton: true,\n                showConfirmButton: false,\n            })\n        );\n    }\n\n\n    checkIfValidGrade(gradeArray) {\n        let newGrades = []\n        for (var i = 0; i < gradeArray.length; i++) {\n            var s = gradeArray[i];\n            if (s.match(/[a-f]/i) && s.length == 1) {\n                newGrades.push(s);\n            }\n            else if (s.length != 0) {\n                this.showErrorBox();\n                return;\n            }\n        }\n        return newGrades;\n    }\n\n    checkIfValidCredits(creditArray) {\n        let newCredits = []\n        for (var i = 0; i < creditArray.length; i++) {\n            var integer = parseInt(creditArray[i], 10);\n            if (Number.isInteger(integer) == true && creditArray[i].length != 0) {\n                newCredits.push(integer);\n            }\n            else if (creditArray[i].length != 0) {\n                this.showErrorBox();\n                return;\n            }\n        }\n        return newCredits;\n    }\n\n    convertGradeToNum(grade, credit) {\n        grade = grade.toLowerCase();\n        switch (grade) {\n            case ('a'):\n                return ((credit * 4));\n            case ('b'):\n                return ((credit * 3));\n            case ('c'):\n                return ((credit * 2));\n            case ('d'):\n                return ((credit * 1));\n            case ('f'):\n                return ((credit * 0));\n        }\n    }\n\n    getCalculation(gradeArray, credits) {\n        let sumArray = []\n        for (var i = 0; i < gradeArray.length; i++) {\n            sumArray.push((this.convertGradeToNum(gradeArray[i], credits[i])))\n        }\n        return ((sumArray.reduce((a, b) => a + b, 0)) / credits.reduce((a, b) => a + b, 0));\n    }\n\n\n    calculateGPA() {\n        let grades = [];\n        let credits = [];\n        let finalAnswer = null;\n        const a = this.state;\n        Object.entries(a).map(([key, value]) => {\n            if (key.includes(\"grade\")) {\n                grades.push(value)\n            }\n            if (key.includes(\"credit\")) {\n                credits.push(value)\n            }\n        })\n        grades = this.checkIfValidGrade(grades);\n        credits = this.checkIfValidCredits(credits);\n        if (grades !== undefined && credits !== undefined) {\n            finalAnswer = this.getCalculation(grades, credits);\n            if (!isNaN(finalAnswer)) {\n                this.showAnswerBox(finalAnswer);\n            }\n        }\n    }\n\n    handleGradeChange(grade, e) {\n        this.setState({\n            [grade]: e.target.value,\n        });\n    }\n\n    handleCreditChange(credit, e) {\n        this.setState({\n            [credit]: e.target.value,\n        });\n    }\n\n    explainCard() {\n        return (\n            <div className=\"display-linebreak\">\n                <h4 className=\"w3\">INSTRUCTIONS</h4>\n                <div className=\"hr\" />\n                <p className=\"w3-text-grey\">\n                    {\"1. For the letter grade column, put in your letter grade(A through F)\\n\" +\n                        \"2. For the credits column put how many credits its worth\\n\" +\n                        \"3. Leave the rest of the rows blank once you've put all your classes in\\n\" +\n                        \"4. Press Calculate when done\"}\n                </p>\n            </div>\n        );\n    }\n\n    renderFormRow(grade, credit) {\n        return (\n            <Row >\n                <Col  >\n                    <Styles>\n                        <Input name={grade} placeholder={\"Letter Grade(A-F)\"} value={this.state[grade]} onChange={(e) => this.handleGradeChange(grade, e)} />\n                    </Styles>\n                </Col >\n                <Col  >\n                    <Styles>\n                        <Input name={credit} placeholder={\"Credits\"} value={this.state[credit]} onChange={(e) => this.handleCreditChange(credit, e)} />\n                    </Styles>\n                </Col>\n            </Row>\n        )\n    }\n\n    renderInputs() {\n        return (\n            <div >\n                {this.renderFormRow(\"grade1\", \"credit1\")}\n                {this.renderFormRow(\"grade2\", \"credit2\")}\n                {this.renderFormRow(\"grade3\", \"credit3\")}\n                {this.renderFormRow(\"grade4\", \"credit4\")}\n                {this.renderFormRow(\"grade5\", \"credit5\")}\n                {this.renderFormRow(\"grade6\", \"credit6\")}\n                <br />\n                <Button onClick={this.calculateGPA} >\n                    <div className=\"w3-opacity\">\n                        <b>CALCULATE</b>\n                    </div>\n                </Button>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <Button onClick={this.resetToBaseState} >\n                    <div className=\"w3-opacity\">\n                        <b>RESET</b>\n                    </div>\n                </Button>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <Jumbotron message=\"GPA CALCULATOR\" pic=\"gpaPic\" />\n                <Container>\n                    {this.explainCard()}\n                    <br />\n                    {this.renderInputs()}\n                </Container>\n            </div>\n        )\n    }\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}