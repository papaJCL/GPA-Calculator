{"version":3,"sources":["App.js","index.js"],"names":["Button","styled","button","Styles","div","App","useState","grade1","credit1","grade2","credit2","grade3","credit3","grade4","credit4","grade5","credit5","grade6","credit6","gridInputs","setGridInputs","baseState","resetToBaseState","showErrorBox","Swal","fire","title","text","icon","cancelButtonText","showCancelButton","showConfirmButton","returnAnswerString","answer","toFixed","convertGradeToNum","grade","credit","toLowerCase","calculateGPA","grades","credits","finalAnswer","Object","entries","map","key","value","includes","push","gradeArray","newGrades","i","length","s","match","checkIfValidGrade","creditArray","newCredits","integer","parseInt","Number","isInteger","checkIfValidCredits","undefined","sumArray","reduce","a","b","getCalculation","isNaN","message","footer","showAnswerBox","renderFormRow","Row","Col","Input","name","placeholder","onChange","e","target","handleGradeChange","handleCreditChange","Jumbotron","Container","className","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.170585f0.chunk.js","sourcesContent":["import React, { useState, Component } from 'react';\nimport { Input } from 'reactstrap'\nimport { Row, Col, Container, Jumbotron } from 'react-bootstrap';\nimport Swal from 'sweetalert2'\nimport '../node_modules/@sweetalert2/theme-dark';\nimport styled from 'styled-components';\nimport './App.css'\n\n\n// ===========================================================================\n// STYLED COMPONENTS =========================================================\n\nconst Button = styled.button`\n    background: #222;\n    border: none;\n    padding: 15px 32px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 6px;\n    color: #bbb;\n    margin:20px\n    transition-duration: 0.4s;\n    -webkit-transition-duration: 0.4s; \n    transition-duration: 0.4s;\n    font-size: 16px;\n    border-radius: 12px;\n    &:hover {\n        color: white;\n    },\n    .btn:focus, .btn:active {\n        outline: none !important;\n        box-shadow: none !important;\n      }\n`;\n\nconst Styles = styled.div`\n    .form-control:focus {\n        border-color: grey;\n        box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.075) inset, 0px 0px 0px grey;\n    }\n    input[type=text] {\n        background-color: white;\n        color: black;\n        font-size: 25x;\n        \n        border: 1px solid grey;\n        border-radius: 4px;\n        \n    }\n`;\n// ===========================================================================\n// ===========================================================================\n\n\n// ===========================================================================\n// GPA APP ===================================================================\n\nfunction App() {\n\n  // STATE MANAGEMENT ----------------------------------------------------\n  const [gridInputs, setGridInputs] = useState({\n    grade1: '', credit1: '',\n    grade2: '', credit2: '',\n    grade3: '', credit3: '',\n    grade4: '', credit4: '',\n    grade5: '', credit5: '',\n    grade6: '', credit6: '',\n  });\n\n  const [baseState] = useState(gridInputs);\n  // ----------------------------------------------------------------------\n\n  // CHANGING STATE -------------------------------------------------------\n  const resetToBaseState = () => {\n    setGridInputs(baseState);\n  }\n\n  const handleGradeChange = (grade, e) => {\n    setGridInputs({\n      ...gridInputs, [grade]: e.target.value,\n    });\n  }\n\n  const handleCreditChange = (credit, e) => {\n    setGridInputs({\n      ...gridInputs, [credit]: e.target.value,\n    });\n  }\n  // ---------------------------------------------------------------------\n\n\n\n  // POPUPS ---------------------------------------------------------------\n  const showErrorBox = () => {\n    return (\n      Swal.fire({\n        title: 'Error!',\n        text: \"One or more of the inputs is formatted incorrectly, make sure the grade is letter A through F and credits is a number\",\n        icon: 'error',\n        cancelButtonText: 'Retry',\n        showCancelButton: true,\n        showConfirmButton: false,\n      })\n    );\n  }\n\n  const showAnswerBox = (answer) => {\n    let message = returnAnswerString(answer);\n    return (\n      Swal.fire({\n        title: message[0],\n        footer: message[1],\n        text: answer.toFixed(2),\n        icon: message[2],\n        cancelButtonText: 'Back',\n        showCancelButton: true,\n        showConfirmButton: false,\n      })\n    );\n  }\n  // ---------------------------------------------------------------------------\n\n\n  // GPA CALCULATION -------------------------------------------------\n  const returnAnswerString = (answer) => {\n    answer = answer.toFixed(2)\n    if (answer >= 3.0) {\n      return [(\"Impressive! \\nYour GPA is\"), (\"Congrats you're doing great!\"), ('success')]\n    }\n    else if (answer > 2.5 && answer < 3.0) {\n      return [(\"Not bad! \\nYour GPA is\"), (\"Keep studying and bump it up!\"), ('warning')]\n    }\n    else if (answer <= 2.5) {\n      return [(\"Keep working hard!\\n Your GPA is\"), (\"Your GPA is quite low but keep trying!\"), ('error')]\n    }\n  }\n\n  const convertGradeToNum = (grade, credit) => {\n    grade = grade.toLowerCase();\n    switch (grade) {\n      case ('a'):\n        return ((credit * 4));\n      case ('b'):\n        return ((credit * 3));\n      case ('c'):\n        return ((credit * 2));\n      case ('d'):\n        return ((credit * 1));\n      case ('f'):\n        return ((credit * 0));\n    }\n  }\n\n  const getCalculation = (gradeArray, credits) => {\n    let sumArray = []\n    for (var i = 0; i < gradeArray.length; i++) {\n      sumArray.push((convertGradeToNum(gradeArray[i], credits[i])))\n    }\n    return ((sumArray.reduce((a, b) => a + b, 0)) / credits.reduce((a, b) => a + b, 0));\n  }\n\n  const checkIfValidCredits = (creditArray) => {\n    let newCredits = []\n    for (var i = 0; i < creditArray.length; i++) {\n      var integer = parseInt(creditArray[i], 10);\n      if (Number.isInteger(integer) == true && creditArray[i].length != 0) {\n        newCredits.push(integer);\n      }\n      else if (creditArray[i].length != 0) {\n        showErrorBox()\n        return;\n      }\n    }\n    return newCredits;\n  }\n\n  const checkIfValidGrade = (gradeArray) => {\n    let newGrades = []\n    for (var i = 0; i < gradeArray.length; i++) {\n      var s = gradeArray[i];\n      if (s.match(/[a-f]/i) && s.length == 1) {\n        newGrades.push(s);\n      }\n      else if (s.length != 0) {\n        showErrorBox()\n        return;\n      }\n    }\n    return newGrades;\n  }\n\n  const calculateGPA = () => {\n    let grades = [];\n    let credits = [];\n    let finalAnswer = null;\n\n    Object.entries(gridInputs).map(([key, value]) => {\n      if (key.includes(\"grade\")) {\n        grades.push(value)\n      }\n      if (key.includes(\"credit\")) {\n        credits.push(value)\n      }\n    })\n\n    grades = checkIfValidGrade(grades);\n    credits = checkIfValidCredits(credits);\n\n    if (grades !== undefined && credits !== undefined) {\n      finalAnswer = getCalculation(grades, credits);\n      if (!isNaN(finalAnswer)) {\n        showAnswerBox(finalAnswer);\n      }\n    }\n  }\n  // ---------------------------------------------------------------------------\n\n  // RENDERING INDIVIDUAL ROWS\n  const renderFormRow = (grade, credit) => {\n    return (\n      <Row >\n        <Col  >\n          <Styles>\n            <Input name={grade} placeholder={\"Letter Grade(A-F)\"} value={gridInputs[grade]} onChange={(e) => handleGradeChange(grade, e)} />\n          </Styles>\n        </Col >\n        <Col  >\n          <Styles>\n            <Input name={credit} placeholder={\"Credits\"} value={gridInputs[credit]} onChange={(e) => handleCreditChange(credit, e)} />\n          </Styles>\n        </Col>\n      </Row>\n    )\n  }\n\n  // RENDERING GRID\n  const renderInputs = () => {\n    return (\n      <div >\n        {renderFormRow(\"grade1\", \"credit1\")}\n        {renderFormRow(\"grade2\", \"credit2\")}\n        {renderFormRow(\"grade3\", \"credit3\")}\n        {renderFormRow(\"grade4\", \"credit4\")}\n        {renderFormRow(\"grade5\", \"credit5\")}\n        {renderFormRow(\"grade6\", \"credit6\")}\n        <br />\n        <Button onClick={calculateGPA} >\n          <div className=\"w3-opacity\">\n            <b>CALCULATE</b>\n          </div>\n        </Button>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n        <Button onClick={resetToBaseState} >\n          <div className=\"w3-opacity\">\n            <b>RESET</b>\n          </div>\n        </Button>\n      </div>\n    )\n  }\n\n  //RENDERING INSTRUCTIONS\n  const instructions = () => {\n    return (\n      <div className=\"display-linebreak\">\n        <h4 className=\"w3\">INSTRUCTIONS</h4>\n        <div className=\"hr\" />\n        <p className=\"w3-text-grey\">\n          {\"1. For the letter grade column, put in your letter grade(A through F)\\n\" +\n            \"2. For the credits column put how many credits its worth\\n\" +\n            \"3. Leave the rest of the rows blank once you've put all your classes in\\n\" +\n            \"4. Press Calculate when done\"}\n        </p>\n      </div>\n    )\n  }\n\n\n  return (\n    <div>\n      <Jumbotron />\n      <Container>\n        {instructions()}\n        <br />\n        {renderInputs()}\n      </Container>\n    </div>\n  )\n}\n\nexport default App;\n// ===========================================================================\n// ===========================================================================\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}